# Generated by Cargo
# will have compiled files and executables
ciel/**/debug/
ciel/**/target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
ciel/**/Cargo.lock

# These are backup files generated by rustfmt
ciel/**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
ciel/**/*.pdb

ciel/**/*.iml

ciel/**/rls/

ciel/**/.vscode/

ciel/**/.idea/

ciel/**/.env

# Local .terraform directories
Setup/**/.terraform/*

# .tfstate files
Setup/**/*.tfstate
Setup/**/*.tfstate.*

# Crash log files
Setup/**/crash.log
Setup/**/crash.*.log

# Exclude all .tfvars files, which are likely to contain sentitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
#
Setup/**/*.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
Setup/**/override.tf
Setup/**/override.tf.json
Setup/**/*_override.tf
Setup/**/*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
Setup/**/.terraformrc
Setup/**/terraform.rc